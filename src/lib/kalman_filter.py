import simdkalman
import numpy as np 
from lib.noglobal import noglobal

T = 1.0

_state_transition_2d = np.array([[1, 0, T, 0, 0.5 * T ** 2, 0], [0, 1, 0, T, 0, 0.5 * T ** 2], [0, 0, 1, 0, T, 0],
                             [0, 0, 0, 1, 0, T], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]])

_process_noise_2d = np.diag([1e-5, 1e-5, 5e-6, 5e-6, 1e-6, 1e-6]) + np.ones((6, 6)) * 1e-9

_observation_model_2d = np.array([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0]])
_observation_noise_2d = np.diag([5e-5, 5e-5]) + np.ones((2, 2)) * 1e-9


_state_transition_1d = np.array([[1, 0, T, 0, 0.5 * T ** 2, 0], [0, 1, 0, T, 0, 0.5 * T ** 2], [0, 0, 1, 0, T, 0],
                             [0, 0, 0, 1, 0, T], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]])
_process_noise_1d = np.diag([1e-5, 1e-5, 5e-6, 5e-6, 1e-6, 1e-6]) + np.ones((6, 6)) * 1e-9
_observation_model_1d = np.array([[1, 0, 0, 0, 0, 0]])
_observation_noise_1d = np.diag([5e-5])


@noglobal()
def generate_kalmanfilter1d(state_transition = _state_transition_1d,process_noise = _process_noise_1d,observation_model = _observation_model_1d,observation_noise=_observation_noise_1d):
    kf_ = simdkalman.KalmanFilter(
        state_transition = state_transition,
        process_noise = process_noise,
        observation_model = observation_model,
        observation_noise = observation_noise
    )

    return kf_


_state_transition_4d = np.array([[1, 0, T, 0, 0.5 * T ** 2, 0], [0, 1, 0, T, 0, 0.5 * T ** 2], [0, 0, 1, 0, T, 0],
                             [0, 0, 0, 1, 0, T], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1]])

_process_noise_4d = np.diag([1e-5, 1e-5, 5e-6, 5e-6, 1e-6, 1e-6]) + np.ones((6, 6)) * 1e-9

_observation_model_4d = np.array([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0]])
_observation_noise_4d = np.diag([5e-5, 5e-5,5e-5, 5e-5]) + np.ones((4, 4)) * 1e-9


@noglobal()
def apply_kalmanfilter1d(num_data,kf):
    
    """
        num_data: the numpy.ndarray data, which is applied kalman filter.
        kf: kalman_filter, which can be generated by generate_kalmanfilter function.            
    """        
    if (len(num_data.shape) == 1):
        data = num_data.reshape(1,num_data.shape[0],1)
    else:
        raise Exception("the dimension of the num_data is not " + str(len(num_data.shape)))
    
    smoothed = kf.smooth(data)
            
    return smoothed.states.mean[0, :,:1];

@noglobal()
def generate_kalmanfilter4d(state_transition = _state_transition_4d,process_noise = _process_noise_4d,observation_model = _observation_model_4d,observation_noise=_observation_noise_4d):
    kf_ = simdkalman.KalmanFilter(
        state_transition = state_transition,
        process_noise = process_noise,
        observation_model = observation_model,
        observation_noise = observation_noise
    )

    return kf_

@noglobal()
def generate_kalmanfilter2d(state_transition = _state_transition_2d,process_noise = _process_noise_2d,observation_model = _observation_model_2d,observation_noise=_observation_noise_2d):
    kf_ = simdkalman.KalmanFilter(
        state_transition = state_transition,
        process_noise = process_noise,
        observation_model = observation_model,
        observation_noise = observation_noise
    )

    return kf_

@noglobal()
def apply_kalmanfilter2d(num_data,kf):
    
    """
        num_data: the numpy.ndarray data, which is applied kalman filter.
        kf: kalman_filter, which can be generated by generate_kalmanfilter function.            
    """        
    if (len(num_data.shape) == 2):
        data = num_data.reshape(1,num_data.shape[0],num_data.shape[1])
    else:
        raise Exception("the dimension of the num_data is not " + str(len(num_data.shape)))
    
    smoothed = kf.smooth(data)
            
    return smoothed.states.mean[0, :,:num_data.shape[1]];
    
if __name__ == "__main__":
    
    pass;
    ###
    #%%time
    #from lib.kalman_filter import apply_kalmanfilter,generate_kalmanfilter
    # #header = ["UncalAccelXMps2","UncalAccelYMps2"]
    # kf = generate_kalmanfilter()
    # s = apply_kalmanfilter(data[header].to_numpy(),kf)
    # apply_kalmanfilter();